package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"

	"github.com/justinjest/pokedexcli/internal/pokecache"
)

func main() {
	pokeCache := pokecache.NewCache(5 * time.Minute)
	var config = &Config{
		Next:     "",
		Previous: "",
		cache:    pokeCache,
	}
	commands := getCommands(config)
	for {
		var input string
		fmt.Printf("Pokedex > ")
		fmt.Scan(&input)
		command, exists := commands[input]
		if exists {
			err := command.callback()
			if err != nil {
				fmt.Printf("Error running command.callback %v\n", err)
			}
		} else {
			fmt.Printf("Sorry, that's not a valid input \n")
		}
	}
}

type cliCommand struct {
	name        string
	description string
	callback    func() error
}

type AutoGenerated struct {
	Count    int    `json:"count"`
	Next     string `json:"next"`
	Previous any    `json:"previous"`
	Results  []struct {
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"results"`
}

type Config struct {
	Next     string
	Previous string
	cache    *pokecache.Cache
}

func getCommands(config *Config) map[string]cliCommand {
	return map[string]cliCommand{
		"help": {
			name:        "help",
			description: "Displays a help message",
			callback:    func() error { return commandHelp(config) },
		},
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
		},
		"map": {
			name:        "map",
			description: "Provides the next 20 locations in the map",
			callback:    func() error { return mapNext(config) },
		},
		"mapb": {
			name:        "mapb",
			description: "Provides the previous 20 locations in the map",
			callback:    func() error { return mapPrevious(config) },
		},
	}
}
func mapPrevious(config *Config) error {
	var url string
	var data []byte
	if config.Previous == "" {
		url = "https://pokeapi.co/api/v2/location-area/"
	} else {
		url = config.Previous
	}

	if val, exists := config.cache.Get(url); exists {
		data = val
	} else {
		res, err := http.Get(url)
		if err != nil {
			return err
		}
		defer res.Body.Close()

		data, err = io.ReadAll(res.Body)
		if err != nil {
			return err
		}
		config.cache.Add(url, data)
	}
	var locations AutoGenerated
	if err := json.Unmarshal(data, &locations); err != nil {
		return err
	}
	config.Next = locations.Next
	if previous, ok := locations.Previous.(string); ok {
		config.Previous = previous
	} else {
		locations.Previous = url
	}

	for _, result := range locations.Results {
		fmt.Printf("%v\n", result.Name)
	}
	return nil
}
func mapNext(config *Config) error {
	var url string
	var data []byte
	if config.Next == "" {
		url = "https://pokeapi.co/api/v2/location-area/"
	} else {
		url = config.Next
	}
	if val, exists := config.cache.Get(url); exists {
		data = val
	} else {
		res, err := http.Get(url)
		if err != nil {
			return err
		}
		defer res.Body.Close()

		data, err = io.ReadAll(res.Body)
		if err != nil {
			return err
		}
		config.cache.Add(url, data)
	}
	var locations AutoGenerated
	if err := json.Unmarshal(data, &locations); err != nil {
		return err
	}
	config.Next = locations.Next
	if previous, ok := locations.Previous.(string); ok {
		config.Previous = previous
	} else {
		locations.Previous = url
	}

	for _, result := range locations.Results {
		fmt.Printf("%v\n", result.Name)
	}
	return nil
}

func commandHelp(config *Config) error {
	commands := getCommands(config)
	fmt.Printf("Welcome to the Pokedex!\n")
	fmt.Printf("Usage:\n\n")
	for _, cmd := range commands {
		fmt.Printf("%v: %v \n", cmd.name, cmd.description)
	}
	fmt.Printf("\n")
	return nil
}

func commandExit() error {
	os.Exit(0)
	return nil
}
